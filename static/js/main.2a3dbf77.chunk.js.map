{"version":3,"sources":["components/Header/index.js","services/api.js","pages/main/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","api","axios","create","baseURL","Main","state","products","productInfo","page","loadProducts","a","get","response","data","docs","setState","prevPage","pageNumber","nextPage","pages","this","className","map","product","key","_id","title","description","href","disabled","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAQeA,G,YAJA,kBACb,4BAAQC,GAAG,eAAX,Y,wECDaC,E,OAFHC,EAAMC,OAAO,CAAEC,QAAS,8CCGfC,G,kNACnBC,MAAQ,CACNC,SAAU,GACVC,YAAa,GACbC,KAAM,G,EASRC,a,sBAAe,gDAAAC,EAAA,6DAAOF,EAAP,+BAAc,EAAd,SACUR,EAAIW,IAAJ,yBAA0BH,IADpC,OACPI,EADO,SAGoBA,EAASC,KAAlCC,EAHK,EAGLA,KAASP,EAHJ,wBAKb,EAAKQ,SAAS,CAAET,SAAUQ,EAAMP,cAAaC,SALhC,2C,EAQfQ,SAAW,WAAO,IAAD,EACe,EAAKX,MAA3BG,EADO,EACPA,KADO,EACDD,YAEd,GAAa,IAATC,EAAJ,CAEA,IAAMS,EAAaT,EAAO,EAE1B,EAAKC,aAAaQ,K,EAGpBC,SAAW,WAAO,IAAD,EACe,EAAKb,MAA3BG,EADO,EACPA,KAER,GAAIA,IAHW,EACDD,YAEWY,MAAzB,CAEA,IAAMF,EAAaT,EAAO,EAE1B,EAAKC,aAAaQ,K,kEA7BlBG,KAAKX,iB,+BAgCG,IAAD,EACiCW,KAAKf,MAArCC,EADD,EACCA,SAAUE,EADX,EACWA,KAAMD,EADjB,EACiBA,YAExB,OACE,yBAAKc,UAAU,gBACZf,EAASgB,KAAI,SAAAC,GAAO,OACnB,6BAASC,IAAKD,EAAQE,KACpB,gCAASF,EAAQG,OACjB,2BAAIH,EAAQI,aACZ,uBAAGC,KAAK,KAAR,eAGJ,yBAAKP,UAAU,WACb,4BAAQQ,SAAmB,IAATrB,EAAYsB,QAASV,KAAKJ,UAA5C,YACA,4BAAQa,SAAUrB,IAASD,EAAYY,MAAOW,QAASV,KAAKF,UAA5D,oB,GAvDwBa,cCSnBC,EAPH,kBACV,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEgBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2a3dbf77.chunk.js","sourcesContent":["import React from 'react';\n\nimport './style.css';\n\nconst Header = () => (\n  <header id=\"main-header\">JSHunt</header>\n)\n\nexport default Header;","import axios from 'axios';\n\nconst api = axios.create({ baseURL: 'https://rocketseat-node.herokuapp.com/api' });\n\nexport default api;","import React, { Component } from 'react';\nimport api from '../../services/api';\n\nimport './style.css';\n\nexport default class Main extends Component {\n  state = {\n    products: [],\n    productInfo: {},\n    page: 1\n  }\n\n  // Esse método é executado quando o componente é mostrado em tela\n  componentDidMount() {\n    this.loadProducts();\n  }\n\n  // quando criamos uma função própria, usamos arrow function\n  loadProducts = async (page = 1) => {\n    const response = await api.get(`/products?page=${page}`);\n\n    const { docs, ...productInfo } = response.data;\n\n    this.setState({ products: docs, productInfo, page });\n  }\n\n  prevPage = () => {\n    const { page, productInfo } = this.state;\n\n    if (page === 1) return;\n\n    const pageNumber = page - 1;\n\n    this.loadProducts(pageNumber)\n  }\n\n  nextPage = () => {\n    const { page, productInfo } = this.state;\n\n    if (page === productInfo.pages) return;\n\n    const pageNumber = page + 1;\n\n    this.loadProducts(pageNumber);\n  }\n\n  render() {\n    const { products, page, productInfo } = this.state; //destructuring\n\n    return (\n      <div className=\"product-list\">\n        {products.map(product => (\n          <article key={product._id}>\n            <strong>{product.title}</strong>\n            <p>{product.description}</p>\n            <a href=\"#\">Acessar</a>\n          </article>\n        ))}\n        <div className=\"actions\">\n          <button disabled={page === 1} onClick={this.prevPage}>Anterior</button>\n          <button disabled={page === productInfo.pages} onClick={this.nextPage}>Próximo</button>\n        </div>\n      </div>\n    )\n  }\n}","import React from 'react';\n\nimport './style.css';\n\nimport Header from './components/Header';\nimport Main from './pages/main';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Main />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}